// ----------------------------------
// RSDK Project: Sonic 2
// Script Description: MBZ Setup Object
// Script Author: Christian Whitehead/Simon Thomley
// Unpacked by Rubberduckycooly's script unpacker
// ----------------------------------

// ========================
// Aliases
// ========================
private alias object.value1  : object.lavaPalTimer
private alias object.value2  : object.paletteTimer
private alias object.value3  : object.lavaPalIndex1
private alias object.value4  : object.lavaPalIndex2
private alias object.value5  : object.lavaPalIndex3
private alias object.value6  : object.lavaPalIndex4
private alias object.value7  : object.oilAniTileDelay
private alias object.value8  : object.oilAniTileFrame
private alias object.value9  : object.deformTimer
private alias object.value10 : object.isDimming

// Player Aliases
private alias object.state : player.state
private alias object.xpos : player.xpos
private alias object.ypos : player.ypos
private alias object.yvel : player.yvel
private alias object.gravity : player.gravity
private alias object.frame : player.frame
private alias object.animation : player.animation

private alias object.value1  : player.timer
private alias object.value14 : player.skidding
private alias object.value18 : player.sortedDrawOrder
private alias object.value37 : player.shield

// Shield Aliases
private alias 3 : SHIELD_FIRE

// Tile Flag Aliases
private alias 0 : TILE_NORMAL
private alias 1 : TILE_OILPOOL
private alias 3 : TILE_LAVA

// Tile Info ID Aliases
private alias 8 : TILEINFO_ANGLEB

// Tracks
private alias 0 : TRACK_STAGE
private alias 1 : TRACK_ACTFINISH
private alias 2 : TRACK_INVINCIBLE
private alias 3 : TRACK_CONTINUE
private alias 4 : TRACK_BOSS
private alias 5 : TRACK_GAMEOVER
private alias 6 : TRACK_DROWNING
private alias 7 : TRACK_SUPER

// Reserved object slots
private alias 10 : SLOT_ZONESETUP
private alias 25 : SLOT_MUSICEVENT_CHANGE
private alias 26 : SLOT_MUSICEVENT_BOSS

// Music Events
private alias  0 : MUSICEVENT_FADETOBOSS
private alias  1 : MUSICEVENT_FADETOSTAGE
private alias  2 : MUSICEVENT_TRANSITION

private alias 0 : MUSICEVENT_FLAG_NOCHANGE
private alias 1 : MUSICEVENT_FLAG_SPEEDUP
private alias 2 : MUSICEVENT_FLAG_SLOWDOWN

// ========================
// Function Declarations
// ========================
reserve function MBZSetup_HandlePlayerOilPool

// These two are unused
reserve function MBZSetup_SpeedUpMusic
reserve function MBZSetup_SlowDownMusic

// ========================
// Static Values
// ========================
// Values here are named this way because the idea is to "mimic" CPZSetup for the CPZ objs in the stage
public value CPZSetup_rotatingStairTimer 	= 0
public value Water_flashTimer 				= 0 // Uses "Water_" since all water objects use it from the setup so its easier to make new objs this way
public value CPZSetup_hasAchievement 		= 0
public value CPZSetup_enteredWater 			= 0

private value MBZSetup_unused1 				= 0	// As the name suggests, this is not used
private value MBZSetup_unused2 				= 0	// As the name suggests, this is not used
private value MBZSetup_unused3 				= 0	// As the name suggests, this is not used
private value MBZSetup_unused4 				= 0	// As the name suggests, this is not used
private value MBZSetup_unknownTimer 		= 0 // This is used to count, but not actually used in any meaningful way

// ========================
// Tables
// ========================

// Palette cycle for the stage
private table MBZSetup_lavaPalCycle
	0xE00000, 0xE06000, 0xE0A000, 0xE0E000, 0xE0E000, 0xE00000, 0xE06000, 0xE0A000, 0xE0C020, 0xE0E000, 0xE00000, 0xE06000, 0xE06000, 0xE0E040, 0xE0E080, 0xE02000
	0xE04000, 0xE08000, 0xE0E060, 0xE0E0A0, 0xE0E080, 0xE02000, 0xE06000, 0xE0E040, 0xE0C020, 0xE0E000, 0xE00000, 0xE06000, 0xE06000, 0xE0C020, 0xE0E000, 0xE00000
	0xE00000, 0xE06000, 0xE0A000, 0xE0E000, 0xE0C000, 0xC00000, 0xE04000, 0xE08000, 0xE06000, 0xC0A000, 0xA00000, 0xE02000, 0xC00000, 0xC04000, 0xE08000, 0x800000
	0xA00000, 0xE02000, 0xE06000, 0xC0A000, 0xE0C000, 0xC00000, 0xE04000, 0xE08000, 0xE0A000, 0xE0E000, 0xE00000, 0xE06000, 0xE06000, 0xE0A000, 0xE0E000, 0xE00000
end table

// Stage deformation data, used for animating the water
private table MBZSetup_deformationTable
	1, 2, 1, 3, 1, 2, 2, 1, 2, 3, 1, 2, 1, 2, 0, 0
	2, 0, 3, 2, 2, 3, 2, 2, 1, 3, 0, 0, 1, 0, 1, 3
	1, 2, 1, 3, 1, 2, 2, 1, 2, 3, 1, 2, 1, 2, 0, 0
	2, 0, 3, 2, 2, 3, 2, 2, 1, 3, 0, 0, 1, 0, 1, 3
end table


// ========================
// Function Definitions
// ========================

// Modified version of Player_State_Ground
private function MBZSetup_State_OilPool
	if object.animation != ANI_SKIDDING
		temp7 = true
	else
		temp7 = false
	end if

	CallFunction(Player_HandleGroundMovement)

	if object.gravity == 1
		object.state = Player_State_Air
		CallFunction(Player_HandleAirMovement)
	else
		CallFunction(Player_HandleOnGround)

		if object.speed == 0
			if object.collisionMode == 0
				if player.timer < 240
					object.animation = ANI_STOPPED
					player.timer++
				else
					object.animation = ANI_WAITING
					if stage.playerListPos == PLAYER_KNUX_ALONE
						player.timer++
						if player.timer == 834
							player.timer = 0
							object.animation = ANI_STOPPED
						end if
					end if
				end if
			end if
		else
			player.timer = 0
			if object.speed > 0
				if object.speed < 0x5F5C2
					object.animation = ANI_WALKING
					CallFunction(Player_HandleWalkAnimSpeed)
				else
					if object.speed > 0x9FFFF
						object.animation = ANI_PEELOUT
					else
						object.animation = ANI_RUNNING
					end if
					CallFunction(Player_HandleRunAnimSpeed)
				end if
			else
				if object.speed > -0x5F5C2
					object.animation = ANI_WALKING
					CallFunction(Player_HandleWalkAnimSpeed)
				else
					if object.speed < -0x9FFFF
						object.animation = ANI_PEELOUT
					else
						object.animation = ANI_RUNNING
					end if
					CallFunction(Player_HandleRunAnimSpeed)
				end if
			end if
		end if

		if player.skidding > 0
			if temp7 == true
				PlaySfx(SfxName[Skidding], false)
			end if

			object.animation = ANI_SKIDDING
			object.animationSpeed = 0
			player.skidding--
			if ringTimer == 0
				CreateTempObject(TypeName[Dust Puff], 0, object.xpos, object.ypos)
				object[tempObjectPos].iypos += object.collisionBottom
				object[tempObjectPos].drawOrder = player.sortedDrawOrder
			end if

			if object.speed > 0
				object.direction = FACING_RIGHT
			else
				object.direction = FACING_LEFT
			end if
		end if

		if object.collisionMode == 0
			if object.pushing == 2
				object.animation = ANI_PUSHING
				object.animationSpeed = 0
			end if
		end if

		if object.jumpPress == true
			CallFunction(Player_Action_Jump)
		end if
	end if
end function


// Unused - would've been used to speed up stage music
// Interestingly, it calls for "MarathonBase_F.ogg" - a song that isn't in the RSDK
// Could this have been the stage's original name..?
private function MBZSetup_SpeedUpMusic
	CheckEqual(object[SLOT_MUSICEVENT_CHANGE].type, TypeName[Music Event])
	temp0 = checkResult
	CheckEqual(object[SLOT_MUSICEVENT_CHANGE].propertyValue, 2)
	temp0 &= checkResult
	CheckEqual(stage.musicFlag, MUSICEVENT_FLAG_NOCHANGE)
	temp0 &= checkResult
	if temp0 == false
		switch music.currentTrack
		case TRACK_STAGE
			SetMusicTrack("Invincibility_F.ogg", TRACK_INVINCIBLE, 30436)
			SwapMusicTrack("MarathonBase_F.ogg", TRACK_STAGE, 502294, 7920)
			break

		case TRACK_INVINCIBLE
			SetMusicTrack("MarathonBase_F.ogg", TRACK_STAGE, 502294)
			SwapMusicTrack("Invincibility_F.ogg", TRACK_INVINCIBLE, 30436, 8000)
			break

		case TRACK_BOSS
			SetMusicTrack("MarathonBase_F.ogg", TRACK_STAGE, 502294)
			SetMusicTrack("Invincibility_F.ogg", TRACK_INVINCIBLE, 30436)
			break
		end switch
	else
		stage.musicFlag = MUSICEVENT_FLAG_SPEEDUP
	end if
end function


// Unused - would've been used to slow down stage music
// Interestingly, it calls for "MarathonBase.ogg" - this song isn't in the RSDK either
private function MBZSetup_SlowDownMusic
	CheckEqual(object[SLOT_MUSICEVENT_CHANGE].type, TypeName[Music Event])
	temp0 = checkResult
	CheckEqual(object[SLOT_MUSICEVENT_CHANGE].propertyValue, 2)
	temp0 &= checkResult
	CheckEqual(stage.musicFlag, MUSICEVENT_FLAG_NOCHANGE)
	temp0 &= checkResult
	if temp0 == false
		switch music.currentTrack
		case TRACK_STAGE
			SetMusicTrack("Invincibility.ogg", TRACK_INVINCIBLE, 39528)
			SwapMusicTrack("MarathonBase.ogg", TRACK_STAGE, 635970, 12650)
			break

		case TRACK_INVINCIBLE
			SetMusicTrack("MarathonBase.ogg", TRACK_STAGE, 635970)
			SwapMusicTrack("Invincibility.ogg", TRACK_INVINCIBLE, 39528, 12500)
			break

		case TRACK_BOSS
			SetMusicTrack("MarathonBase.ogg", TRACK_STAGE, 635970)
			SetMusicTrack("Invincibility.ogg", TRACK_INVINCIBLE, 39528)
			break
		end switch
	else
		stage.musicFlag = MUSICEVENT_FLAG_SLOWDOWN
	end if
end function


// ========================
// Events
// ========================

event ObjectUpdate
	// Pulsing palette, for the lava
	object.lavaPalTimer++
	if object.lavaPalTimer == 12
		object.lavaPalTimer = 0

		object.lavaPalIndex1 += 4
		object.lavaPalIndex1 &= 0x3F
		GetTableValue(temp0, object.lavaPalIndex1, MBZSetup_lavaPalCycle)
		SetPaletteEntry(0, 96, temp0)

		object.lavaPalIndex2 += 4
		object.lavaPalIndex2 &= 0x3F
		GetTableValue(temp0, object.lavaPalIndex2, MBZSetup_lavaPalCycle)
		SetPaletteEntry(0, 97, temp0)

		object.lavaPalIndex3 += 4
		object.lavaPalIndex3 &= 0x3F
		GetTableValue(temp0, object.lavaPalIndex3, MBZSetup_lavaPalCycle)
		SetPaletteEntry(0, 98, temp0)

		object.lavaPalIndex4 += 4
		object.lavaPalIndex4 &= 0x3F
		GetTableValue(temp0, object.lavaPalIndex4, MBZSetup_lavaPalCycle)
		SetPaletteEntry(0, 99, temp0)
	end if

	// Cycling palette
	object.paletteTimer++
	if object.paletteTimer == 4
		object.paletteTimer = 0
		RotatePalette(0, 100, 105, false)
	end if

	// Ani Tiles, for the oil
	if object.oilAniTileDelay < 2
		temp0 = object.oilAniTileFrame
		temp0 += 462
		Copy16x16Tile(408, temp0)

		temp0++
		Copy16x16Tile(409, temp0)

		temp0++
		Copy16x16Tile(410, temp0)

		temp0++
		Copy16x16Tile(411, temp0)

		temp0 += 21
		Copy16x16Tile(412, temp0)

		temp0++
		Copy16x16Tile(413, temp0)

		temp0++
		Copy16x16Tile(414, temp0)

		temp0++
		Copy16x16Tile(415, temp0)

		object.oilAniTileDelay = 18
		object.oilAniTileFrame += 4
		object.oilAniTileFrame %= 24
	else
		object.oilAniTileDelay--
	end if

	// Water shining
	object.deformTimer++
	if object.deformTimer > 7
		tileLayer[1].deformationOffset++
		object.deformTimer = 0
	end if
	
	// Update some value, though this value never really does anything beyond this
	GetTableValue(temp0, 21, StageSetup_oscillationTable)
	if temp0 == 0
		MBZSetup_unknownTimer++
		MBZSetup_unknownTimer &= 3
	end if

	// Randomize the animals, looping around all the animals in the game
	temp0 = oscillation
	temp0 &= 15
	if temp0 > 11
		temp0 = 5
	end if
	temp0 += TypeName[Flicky]
	animalType1 = temp0
	animalType2 = temp0

	// Check interaction with players
	foreach (GROUP_PLAYERS, currentPlayer, ACTIVE_ENTITIES)
		if player[currentPlayer].animation == ANI_TWIRL
			player[currentPlayer].frame %= 24
		end if

		temp1 = player[currentPlayer].xpos
		temp1 >>= 16

		temp2 = player[currentPlayer].ypos
		temp2 >>= 16
		temp2 += 6

		// Get the B-version "angle" of the tile the player is on
		// "Angle" is actually used to hold flags and such, same goes for other stages
		Get16x16TileInfo(temp0, temp1, temp2, TILEINFO_ANGLEB)
		switch temp0
		default
		case TILE_NORMAL
			break

		case TILE_OILPOOL
			if player[currentPlayer].yvel > -1
				player[currentPlayer].state = MBZSetup_State_OilPool
				CheckEqual(player[currentPlayer].animation, ANI_JUMPING)
				temp0 = checkResult
				CheckEqual(player[currentPlayer].animation, ANI_DROPDASH)
				temp0 |= checkResult
				if temp0 == true
					player[currentPlayer].animation = ANI_WALKING
				end if
				player[currentPlayer].gravity = GRAVITY_GROUND
				player[currentPlayer].yvel = 0
				player[currentPlayer].ypos += 0x10000
			end if
			break

		case TILE_LAVA
			// Lava tile
			// Only harm the player if they don't have a flame shield
			if player[currentPlayer].shield != SHIELD_FIRE
				CallFunction(Player_Hit)
			end if
			break
		end switch
	next

	if object.isDimming == true
		if object.alpha < 0x80
			object.alpha += 4
		end if
	else
		if object.alpha > 0
			object.alpha -= 4
		end if
	end if

	object.isDimming = false
end event


event ObjectDraw
	DrawRect(0, 0, 512, 240, 0x00, 0x20, 0x50, object.alpha)
end event


event ObjectStartup
	SetMusicTrack("DeathEgg.ogg", TRACK_STAGE, true)
	SetPaletteEntry(0, 192, 0x000000)

	object[SLOT_ZONESETUP].type 		 = TypeName[MBZ Setup]
	object[SLOT_ZONESETUP].priority 	 = PRIORITY_ACTIVE
	object[SLOT_ZONESETUP].lavaPalIndex1 = 0
	object[SLOT_ZONESETUP].lavaPalIndex2 = 1
	object[SLOT_ZONESETUP].lavaPalIndex3 = 2
	object[SLOT_ZONESETUP].lavaPalIndex4 = 3
	object[SLOT_ZONESETUP].drawOrder 	 = 1

	// Interesting note - most of this does nothing!
	// The normal BG used only has deformation enabled for a very small height - 13 pixels to be exact!
	// However, the unused third background layer has deformation enabled for its entirety, so perhaps this was meant for that..?
	// Certainly very strange...
	arrayPos0 = 0
	while arrayPos0 < 576
		temp0 = arrayPos0
		temp0 &= 0x3F
		GetTableValue(stage.deformationData2[arrayPos0], temp0, MBZSetup_deformationTable)
		arrayPos0++
	loop

	CPZSetup_rotatingStairTimer = 0
	Water_flashTimer 			= 0
	CPZSetup_hasAchievement 	= false
	CPZSetup_enteredWater 		= 0
	MBZSetup_unused1 			= 0
	MBZSetup_unused2 			= 0
	MBZSetup_unused3 			= 0
	MBZSetup_unused4 			= 0
end event


// ========================
// Editor Events
// ========================

event RSDKDraw
	DrawSprite(0)
end event


event RSDKLoad
	LoadSpriteSheet("Global/Display.gif")
	SpriteFrame(-16, -16, 32, 32, 1, 143)
	
	SetVariableAlias(ALIAS_VAR_PROPVAL, "unused")
end event
